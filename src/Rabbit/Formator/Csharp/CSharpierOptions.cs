using System.Text;

namespace Rabbit.Formator.Csharp;

/// <summary>
/// CSharpier 命令行工具的配置选项模型
/// </summary>
public class CSharpierOptions
{
    #region 基本操作参数

    /// <summary>
    /// 绕过缓存以确定文件是否需要格式化
    /// 对应参数: --no-cache
    /// </summary>
    public bool? NoCache { get; set; }

    /// <summary>
    /// 绕过检查以确定 csproj 文件是否引用了不同版本的 CSharpier.MsBuild
    /// 对应参数: --no-msbuild-check
    /// </summary>
    public bool? NoMsBuildCheck { get; set; } = true;

    /// <summary>
    /// 包括由 SDK 生成的文件以及以 &lt;autogenerated /&gt; 注释开头的文件
    /// 对应参数: --include-generated
    /// </summary>
    public bool? IncludeGenerated { get; set; }

    /// <summary>
    /// 跳过对格式化文件的验证以提高性能
    /// 对应参数: --skip-validation
    /// </summary>
    public bool? SkipValidation { get; set; } = true;

    /// <summary>
    /// 跳过写入更改。通常用于测试以确保 CSharpier 不会抛出任何错误或导致语法树验证失败
    /// 对应参数: --skip-write
    /// </summary>
    public bool? SkipWrite { get; set; }

    /// <summary>
    /// 将格式化任何文件的结果输出到 stdout
    /// 对应参数: --write-stdout
    /// 注意: 此属性固定为 true，用于格式化服务获取输出结果
    /// </summary>
    public bool? WriteStdout { get; } = true;

    /// <summary>
    /// 将文件的编译错误视为警告而不是错误
    /// 对应参数: --compilation-errors-as-warnings
    /// </summary>
    public bool? CompilationErrorsAsWarnings { get; set; } = true;

    /// <summary>
    /// CSharpier 配置文件的路径
    /// 对应参数: --config-path
    /// </summary>
    public string? ConfigPath { get; set; }

    /// <summary>
    /// CSharpier 忽略文件的路径
    /// 对应参数: --ignore-path
    /// </summary>
    public string? IgnorePath { get; set; }

    /// <summary>
    /// 通过 stdin 管道输入时提供路径
    /// 对应参数: --stdin-path
    /// </summary>
    public string? StdinPath { get; set; }

    /// <summary>
    /// 日志输出格式: Console (默认), MsBuild
    /// 对应参数: --log-format
    /// </summary>
    public string? LogFormat { get; set; }

    /// <summary>
    /// 指定日志级别: Debug, Information (默认), Warning, Error, None
    /// 对应参数: --log-level
    /// </summary>
    public string? LogLevel { get; set; }

    #endregion

    #region 方法

    /// <summary>
    /// 将配置选项转换为命令行参数字符串
    /// </summary>
    /// <returns>格式化的命令行参数字符串</returns>
    public override string ToString()
    {
        var sb = new StringBuilder(256);

        sb.Append("format ");

        // 基本操作参数
        if (NoCache == true) sb.Append("--no-cache ");
        if (NoMsBuildCheck == true) sb.Append("--no-msbuild-check ");
        if (IncludeGenerated == true) sb.Append("--include-generated ");
        if (SkipValidation == true) sb.Append("--skip-validation ");
        if (SkipWrite == true) sb.Append("--skip-write ");
        if (WriteStdout == true) sb.Append("--write-stdout ");
        if (CompilationErrorsAsWarnings == true) sb.Append("--compilation-errors-as-warnings ");

        if (ConfigPath != null) sb.Append("--config-path \"").Append(ConfigPath).Append("\" ");
        if (IgnorePath != null) sb.Append("--ignore-path \"").Append(IgnorePath).Append("\" ");
        if (StdinPath != null) sb.Append("--stdin-path \"").Append(StdinPath).Append("\" ");
        if (LogFormat != null) sb.Append("--log-format ").Append(LogFormat).Append(' ');
        if (LogLevel != null) sb.Append("--log-level ").Append(LogLevel).Append(' ');

        // 移除末尾空格
        if (sb.Length > 0 && sb[^1] == ' ')
            sb.Length--;

        return sb.ToString();
    }

    #endregion
}
